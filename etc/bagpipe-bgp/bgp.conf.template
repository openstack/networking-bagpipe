[BGP]
local_address=eth0
#local_address=192.168.100.177
peers=192.168.0.101
my_as=64512
enable_rtc=True

[COMMON]
# Root helper and root helper application
#   root_helper_daemon is designed to use oslo-rootwrap-daemon for commands
#   that need to be run as root.
#   If root_helper_daemon is unset, bagpipe-bgp will use 'root_helper' to call
#   these commands, which defaults to 'sudo', and can be configured to use
#   oslo.rootwrap.
#root_helper = sudo
#root_helper_daemon = sudo /usr/local/bin/neutron-rootwrap-daemon /etc/bagpipe-bgp/rootwrap.conf

[API]
# BGP component API IP address and port
host=localhost
port=8082


[DATAPLANE_DRIVER_IPVPN]

# IP VPN dataplane driver class
#  Example values:
#dataplane_driver = ovs
#dataplane_driver = linux
dataplane_driver = dummy

# OVS bridge to use (defaults to br-int)
#ovs_bridge=ovsbr0

# MPLS outgoing interface (for linux and ovs drivers)
#
# (not specifying an mpls_interface or using the '*gre*' special value
# means that the driver will instantiate a tunnel interface and use an
# MPLS/GRE encapsulation)
# mpls_interface=*gre*
mpls_interface=*gre*

# GRE tunnel to use (default to mpls_gre)
#gre_tunnel=mpls_gre

# Uncomment the following to allow the use of standard MPLS-o-GRE in OVS
# (rather than MPLS-o-Eth-o-GRE).
#
# gre_tunnel_options="packet_type=legacy_l3"

# Support VXLAN encapsulation of IP VPN traffic with the
# ovs driver.
#
# Note well: this is non-standard and aimed at making it easier
# to test IP VPN until OVS 2.4 is shipping
#
# WARNING: this option does *not* co-exist with the EVPN
#          linux (can't have both OVS and the linux
#          kernel native VXLAN stack process VXLAN)
#
#vxlan_encap=True

# local IP address (that others will use to send us encapsulated packets, and that
# we will use to send)
# Note: does not need to be specified if different than the BGP local_address
# dataplane_local_address=eth1
# dataplane_local_address=1.2.3.4

# (obsolete:)
ovsbr_interfaces_mtu=4000

# for ovs driver, control whether or not the VRF will
# reply to ARP requests on the subnet and impersonate the gateway
# (defaults to False)
#arp_responder=False

# for ovs driver, control if VRF will reply to ARP requests for all IP
# addresses if enabled, otherwise only for gateway
# (defaults to False)
#proxy_arp=False

[DATAPLANE_DRIVER_EVPN]

# EVPN dataplane driver class
# Example values:
#dataplane_driver = ovs
#dataplane_driver = linux
dataplane_driver = dummy

# The linux driver allows to force the VXLAN destination port IF iproute2 is
# at version 3.14 or above (i.e. >= "ss140411" with "ip -V").
#
# to use standard IANA port for VXLAN:
#vxlan_dst_port=4789
#
# to interoperate with switches or boxes not having the ability to
# use another port than the linux kernel default 8472:
#vxlan_dst_port=8472

# local IP address (that others will use to send us encapsulated packets, and that
# we will use to send)
# Note: does not need to be specified if different than the BGP local_address
# dataplane_local_address=eth1
# dataplane_local_address=1.2.3.4
